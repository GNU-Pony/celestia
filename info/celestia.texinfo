\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename celestia.info
@settitle celestia
@afourpaper
@documentencoding UTF-8
@documentlanguage en
@finalout
@c %**end of header

@c --- start of do not touch ---
@set SPOOL /var/spool/celestia/
@set LIST /etc/celestia/list
@set DEVNULL /dev/null
@set LOCALSYSBIN /usr/local/sbin
@c --- end of do not touch ---


@copying
Copyright @copyright{} 2013 Mattias Andrée

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts. A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@ifnottex
@node Top
@top celestia -- Automated package distribution updater
@insertcopying
@end ifnottex

@titlepage
@title celestia
@subtitle Automated package distribution updater
@author by Mattias Andrée (maandree)

@page
@vskip 0pt plus 1filll
@insertcopying
@page
@*@*
@center `Will you accept my friendship?'
@end titlepage

@contents



@menu
* Overview::                        Brief overview of @command{celestia}.
* Celestia in chains::              Celestia as a part of automated package distribution.
* Celestia on the drive::           Celestia's storage and configurations.
* Scroll generation::               How to tell Celestia to create the scrolls.
* GNU Free Documentation License::  Copying and sharing this manual.
@end menu



@node Overview
@chapter Overview

Celestia is this horny pegasus pony that writes scrolls and sends them to Spike.
Celestia can be used for any distribution, but is written for GNU/Pony, her
task is to automatically maintain package distributions@footnote{Known as scrolls in GNU/Pony}
that do not need to much installation modifications between updates.
You are recommended to set up @command{celestia} as a cron job to maintain
your scrolls.



@node Celestia in chains
@chapter Celestia in chains

You can@footnote{Actually, you should} use @command{celestia} as a port of your
toolchain for maintain software package distributions. To do this, you can setup
a cron job to run @command{celestia} every 12 hour or so.

Whenever @command{celestia} updates a package it will print information about it
to its standard output, which can then be read by another program that publishes
it or inform you to do so manually@footnote{Manully is recommended as you may want
to test that it actually works.}

@command{celestia}'s output is one line per package, each of three single blank
space-seperated (U+0020) columns. The first column is the name of the updated
package, the second column is the new version of the package, and the last
column, that may contain blank spaces, is the file celestia has created for the
package.

GNU/Pony scroll maintainers@footnote{And maintainers for other @command{spike}
based distributions} should use @command{spike --proofread} to verify the
correctness of the created packages before the scroll is published.

@command{celestia}'s output to standard error is just diagnositical messages
printed by programs @command{celestia} invokes, so you may want to suppress it
by piping @command{celestia}'s seconds file descriptor (standard error) to
@file{@value{DEVNULL}}. You may however want to create personal commands used
by @command{celestia} that informs you when a package cannot be updated.



@node Celestia on the drive
@chapter Celestia on the drive

Celestia has one file, @file{@value{LIST}}, in which you list packages to maintain.
In this file all empty lines and lines starting with a hash (@code{#}) is ignored,
the rest are interpreted as directories that contain the data needed for maintainance.
These directories have four reserved filenames: @file{curver}, @file{version} and
@file{template} and @file{finalise}.

@file{.curver} is used by @command{celestia} to keep track of the current version
of the scroll, the other three are used written by the user and is used to generate
the files needed for the distribution, @file{finalise} is optional and it, as well
as @file{version}, must be executable by the user that runs @command{celestia}.

Celestia also has a directory, @file{@value{SPOOL}}, in which @command{celestia}
will locate all scrolls it has created. These files will be named exactly as the
package and is the third coloumn in @command{celestia}'s output.



@node Scroll generation
@chapter Scroll generation

@command{celestia} will always @command{cd} into the directory with the data
use to create a scroll. The directory should contain a command named
@command{./version} which is used by @command{celestia} to find the lasted
available version of a program. @command{./version} should be quite (in
standard output) on failure, but on success print a line consisting of the
package's name followed by a single blank space and the lastest available
verion's version number.

@command{./finalise} is an optional command that is invoked, if it exists,
between the creation (save into file system) of the scroll and output to
standard output. In @command{./finalise} you can do anything needed to
complete the scroll, such as create auxiliary files or renaming the scroll
(the rename will not be reflected in the output.)
@command{./finalise} is invoked with four arguments: the package name,
the new package version, the created scroll file's complete file name,
and the directory in which scrolls are placed (@file{@value{SPOOL}}).

The directory for a scroll must also contain a file named @file{template},
which is a templete for the scroll to create. However that files
protection bits (mode) will not effect the generated file, whose protection
bits will be set to, in octal, 666 & ~umask@footnote{umask is normally 022, this results to 644},
which is the protection bits scrolls and corresponding in other package
managers, in general, should have.

@file{template} should look exactly as the generated scroll, except it
contains placeholders, and the characters @code{€}, @code{@{} and @code{@}}
are replaced by @code{€@{@}}, @code{€@{<@}} and @code{€@{>@}}, respectively,
however @code{@{} and @code{@}} need only to be subsituted if they do not
pair up or if the @code{@{} directly follows a @code{€}. The placeholdes
is on the format @code{€@{X@}}, where @code{X} is the either a GNU Bash
command or @code{name}, @code{version}, or @code{filename}. @code{€@{name@}}
will fill in the package's name, @code{€@{version@}} will fill in the package's
version and @code{€@{filename@}} will fill in the complete name of the
generated file (it will not have been generated yet). These placeholder
can be needed.

@cartouche
For example, if you have @code{"http://example.org/example-$pkgver.tar.xz"}
as a source, to get it new version's sha3sum you can use this in its place:

@example
€@{wget "http://example.org/example-€@{pkgver@}.tar.xz" -O - |
sha3sum | cut -d ' ' -f 1@}
@end example

For simplicity you may want to create the following
@*command as @file{@value{LOCALSYSBIN}/wsha3sum}:

@example
#!/bin/sh
wget "$1" -O - | sha3sum | cut -d ' ' -f 1
@end example

and just use:

@example    
€@{wsha3sum "http://example.org/example-€@{pkgver@}.tar.xz"@}
@end example
@end cartouche



@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include fdl.texinfo

@bye

